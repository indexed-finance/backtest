{"version":3,"sources":["state/api.ts","state/reducers/alert-reducer.js","components/Graph.js","state/reducers/form-reducer.js","state/reducers/tokens-reducer.js","state/reducers/index.js","components/Row.tsx","components/SmallSwitch.tsx","components/TokenSelect.js","components/DataSetForm.tsx","App.js","reportWebVitals.js","index.js"],"names":["query","method","body","a","fetch","headers","Accept","JSON","stringify","response","json","data","getPrices","tokens","getWeightTargets","size","backtest","options","getVolatility","console","log","initialState","active","info","severity","alertReducer","action","type","formatNumber","num","b","m","parseFloat","toFixed","Graph","labels","datasets","title","useState","fullscreen","setFullscreen","maintainAspectRatio","tooltips","callbacks","label","tooltipItem","yLabel","datasetIndex","scales","yAxes","ticks","callback","value","index","values","defaultOptions","toLowerCase","includes","Object","assign","display","text","toggle","Modal","open","onClose","className","Paper","style","width","height","IconButton","onClick","name","swapFee","reweighHours","weightChangePercent","dailyJoinVolume","dailySwapVolume","minimumTraderProfit","startingValue","marketcapDatasets","priceDatasets","poolDatasets","poolLabels","loading","createPool","createHodlPool","createBalancerPool","weightDatasets","weightLabels","indexSize","volatilityDatasets","volatilityLabels","formReducer","state","hours","volume","selectedTokens","TokenActionTypes","tokensReducer","token","filter","t","formDispatch","tokensDispatch","selected","newTokens","push","length","StateContext","createContext","StateProvider","children","alertHooks","useReducer","dispatch","sendAlert","message","dismissAlert","alert","useAlerts","formHooks","renderVolatility","setIndexSize","renderPoolData","renderTokenPrices","renderWeights","formLoading","setName","setFee","fee","setDailyJoinVolume","setDailySwapVolume","toggleIndexPool","toggleBalancerPool","toggleHodlPool","setStartingValue","setMinimumTraderProfit","useForm","tokenHooks","useTokens","stateHooks","initialValue","hodl","balancer","toggleToken","handleToggle","newsize","updateWeights","backtestPools","getTokenVolatility","Provider","useGlobalState","useContext","Row","colSize","colSpacing","rowSpacing","childArr","Array","isArray","Grid","item","container","justify","spacing","direction","wrap","map","child","i","md","key","SmallSwitch","checked","disabled","tooltip","comp","FormControlLabel","control","Switch","color","Tooltip","icon","fontSize","checkedIcon","require","symbolToIndex","reduce","obj","opt","symbol","TokenSelect","setOptions","newOptions","Autocomplete","multiple","id","disableCloseOnSelect","disable","renderTags","getOptionLabel","option","onChange","event","reason","details","renderOption","Fragment","Checkbox","marginRight","renderInput","params","TextField","variant","placeholder","Chip","onDelete","SmallButton","Button","DataSetForm","rootProps","setValue","endAdornment","startAdornment","inputProps","newValue","target","InputProps","disableButtons","paddingTop","CircularProgress","App","renderTokenMarketcaps","paddingLeft","paddingRight","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1f15602.chunk.js","sourcesContent":["export type Dataset = {\n  label: string;\n  fill: boolean;\n  data: number[];\n  pointRadius: number;\n  backgroundColor: string;\n  borderColor: string;\n};\n\nexport type BacktestOptions = {\n  tokens: string[];\n  swapFee: number;\n  initialValue: number;\n  dailyJoinVolume: number;\n  dailySwapVolume: number;\n  minimumTraderProfit: number;\n  hodl?: boolean;\n  index?: boolean;\n  balancer?: boolean;\n  size: number;\n};\n\nasync function query(method: string, body: any) {\n  const response = await fetch(`/${method}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  });\n  const data = await response.json();\n  return data;\n}\n\nexport async function getPrices(tokens: string[]): Promise<{ /* marketcapDatasets: Dataset[];  */priceDatasets: Dataset[]; labels: string[]; }> {\n  const body = { tokens };\n  const data = await query('price-datasets', body);\n  return data;\n}\n\nexport async function getWeightTargets(tokens: string[], size: number): Promise<{ datasets: Dataset[], labels: string[] }> {\n  const body = { tokens, size };\n  const data = await query('weight-datasets', body);\n  return data;\n}\n\nexport async function backtest(options: BacktestOptions): Promise<{ datasets: Dataset[], labels: string[] }> {\n  const data = await query('backtest', options);\n  return data;\n}\n\nexport async function getVolatility(tokens: string[]): Promise<{ datasets: Dataset[], labels: string[] }> {\n  const data = await query('volatility', { tokens });\n  console.log(data)\n  return data;\n}","import { useReducer } from \"react\";\n\nconst initialState = {\n  active: true,\n  info: 'msg',\n  severity: 'info'\n}\n\nfunction alertReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'DISMISS_ALERT': return { active: false, info: '', severity: '' };\n    case 'ALERT': return { active: true, info: action.info, severity: action.severity };\n  }\n}\n\nexport function useAlerts() {\n  const [state, dispatch] = useReducer(alertReducer, initialState);\n  const sendAlert = (message, severity = 'info') => dispatch({ type: 'ALERT', info: message, severity });\n  const dismissAlert = () => dispatch({ type: 'DISMISS_ALERT' });\n\n  return { sendAlert, dismissAlert, alert: state.active && state };\n}\n","import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport IconButton from '@material-ui/core/IconButton';\nimport Modal from '@material-ui/core/Modal';\nimport Paper from '@material-ui/core/Paper';\nimport \"./Graph.css\";\n\n/*     options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function(value, index, values) {\n                        return '$' + value;\n                    }\n                }\n            }]\n        }\n    } */\n\nconst formatNumber = (num) => {\n  const b = 1000000000;\n  const m = 1000000;\n  if (num >= b) {\n    return `$${parseFloat((num/b).toFixed(3))}b`;\n  }\n  if (num >= m) {\n    return `$${parseFloat((num/m).toFixed(2))}m`;\n  }\n  return `$${parseFloat((num).toFixed(5))}`;\n}\n\nconst defaultOptions = (type = 'dollars') => ({\n  maintainAspectRatio: false,\n  tooltips: {\n    callbacks: {\n        label: function(tooltipItem, data) {\n          const { yLabel, datasetIndex } = tooltipItem;\n            var label = data.datasets[datasetIndex].label || '';\n\n            if (label) {\n              label += ': ';\n            }\n            if (type == 'dollars') {\n              label += formatNumber(+yLabel);\n            } else if (type == 'percent') {\n              label += `${yLabel}%`;\n            }\n            return label;\n        }\n    }\n  },\n  scales: {\n    yAxes: [{\n      ticks: {\n          // Include a dollar sign in the ticks\n          callback: function(value, index, values) {\n            if (type == 'dollars') {\n              return formatNumber(value);\n            } else if (type == 'percent') {\n              return `${value}%`\n            }\n          }\n      }\n  }]\n  }\n})\n\nexport function Graph({ labels, datasets, title }) {\n  const [fullscreen, setFullscreen] = useState(false);\n  const options = {\n    ...defaultOptions(\n      (title && (title.toLowerCase().includes('weight') || title.includes('%')))\n        ? 'percent'\n        : 'dollars'\n    )\n  };\n  if (title) {\n    Object.assign(options, { title: { display: true, text: title } })\n  }\n  \n  const toggle = () => setFullscreen(!fullscreen);\n  if (!fullscreen) {\n    return <div className='graph-container'>\n      <IconButton size='small' onClick={toggle}><FullscreenIcon /></IconButton>\n      <Line data={{ labels, datasets}} options={options} width={500} />\n    </div>\n  }\n  return <Modal open={true} onClose={toggle} className='modal-fullscreen'>\n    <Paper style={{ width: '100%', height: '100%' }}>\n      <Line data={{ labels, datasets}} options={options} width={1000} />\n    </Paper>\n  </Modal>\n}","import React, { useReducer } from 'react';\nimport { Graph } from '../../components/Graph';\n\nconst initialState = {\n  name: '',\n  swapFee: 2.5,\n  reweighHours: 1,\n  weightChangePercent: 1,\n  dailyJoinVolume: 2.5,\n  dailySwapVolume: 5,\n  minimumTraderProfit: 5,\n  startingValue: 10000,\n  datasets: [],\n  marketcapDatasets: [],\n  priceDatasets: [],\n  poolDatasets: [],\n  poolLabels: [],\n  labels: [],\n  loading: false,\n  createPool: false,\n  createHodlPool: false,\n  createBalancerPool: false,\n  weightDatasets: [],\n  weightLabels: [],\n  indexSize: 0,\n  volatilityDatasets: [],\n  volatilityLabels: []\n}\n\nexport function formReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_DATA': {\n      const { labels, marketcapDatasets, priceDatasets } = action;\n      return { ...state, labels, marketcapDatasets, priceDatasets, loading: false }\n    }\n    case 'SET_NAME': return { ...state, name: action.name };\n    case 'SET_FEE': return { ...state, swapFee: action.swapFee };\n    case 'SET_MIN_PROFIT': return { ...state, minimumTraderProfit: action.minimumTraderProfit };\n    case 'SET_REWEIGH_HOURS': return { ...state, reweighHours: action.hours };\n    case 'SET_WEIGHT_CHANGE_PCT': return { ...state, weightChangePercent: action.weightChangePercent };\n    case 'SET_JOIN_VOL': return { ...state, dailyJoinVolume: action.volume };\n    case 'SET_SWAP_VOL': return { ...state, dailySwapVolume: action.volume };\n    case 'START_LOADING': return { ...state, loading: true };\n    case 'STOP_LOADING': return { ...state, loading: false };\n    case 'TOGGLE_POOL': return { ...state, createPool: !state.createPool };\n    case 'TOGGLE_HODL_POOL': return { ...state, createHodlPool: !state.createHodlPool };\n    case 'TOGGLE_BALANCER_POOL': return { ...state, createBalancerPool: !state.createBalancerPool };\n    case 'SET_START_VALUE': return { ...state, startingValue: action.value };\n    case 'SET_POOL_DATA': return { ...state, poolDatasets: action.datasets, poolLabels: action.labels, loading: false };\n    case 'SET_WEIGHTS': return { ...state, weightDatasets: action.datasets, weightLabels: action.labels, loading: false }\n    case 'SET_INDEX_SIZE': return { ...state, indexSize: action.size };\n    case 'SET_VOLATILITY': return { ...state, volatilityDatasets: action.datasets, volatilityLabels: action.labels, loading: false };\n  }\n}\n\nexport function useForm() {\n  const [state, dispatch] = useReducer(formReducer, initialState);\n  const setName = (name) => dispatch({ type: 'SET_NAME', name })\n  const setFee = (fee) => dispatch({ type: 'SET_FEE', swapFee: fee });\n  const setDailyJoinVolume = (volume) => dispatch({ type: 'SET_JOIN_VOL', volume });\n  const setDailySwapVolume = (volume) => dispatch({ type: 'SET_SWAP_VOL', volume });\n  const setMinimumTraderProfit = (minimumTraderProfit) => dispatch({ type: 'SET_MIN_PROFIT', minimumTraderProfit });\n\n  const renderTokenPrices = () => {\n    if (!state.priceDatasets.length) return <></>\n    return <Graph labels={state.labels} datasets={state.priceDatasets} title={'Token Prices (% Change From Start)'} />\n  }\n/*   const renderTokenMarketcaps = () => {\n    if (!state.marketcapDatasets.length) return <></>\n    return <Graph labels={state.labels} datasets={state.marketcapDatasets} title={'Token Marketcaps (% Change From Start)'} />\n  } */\n  const renderPoolData = () => {\n    if (!state.poolDatasets.length) return <></>\n    return <Graph labels={state.poolLabels} datasets={state.poolDatasets} title={state.name || 'Portfolio Comparison'} />\n  }\n  const renderWeights = () => {\n    if (!state.weightDatasets.length) return <></>\n    return <Graph labels={state.weightLabels} datasets={state.weightDatasets} title='Token Weights (%)' />\n  }\n  const renderVolatility = () => {\n    if (!state.volatilityDatasets.length) return <></>\n    return <Graph labels={state.volatilityLabels} datasets={state.volatilityDatasets} title='Token Volatility (%)' />\n  }\n  const toggleIndexPool = () => dispatch({ type: 'TOGGLE_POOL' });\n  const toggleBalancerPool = () => dispatch({ type: 'TOGGLE_BALANCER_POOL' });\n  const toggleHodlPool = () => dispatch({ type: 'TOGGLE_HODL_POOL' });\n  const setStartingValue = (value) => dispatch({ type: 'SET_START_VALUE', value })\n  const setIndexSize = (size) => dispatch({ type: 'SET_INDEX_SIZE', size });\n\n  return {\n    renderVolatility,\n    indexSize: state.indexSize,\n    setIndexSize,\n    formDispatch: dispatch,\n    renderPoolData,\n    renderTokenPrices,\n    // renderTokenMarketcaps,\n    renderWeights,\n    formLoading: state.loading,\n    setName,\n    name: state.name,\n    swapFee: state.swapFee,\n    setFee,\n    dailyJoinVolume: state.dailyJoinVolume,\n    dailySwapVolume: state.dailySwapVolume,\n    setDailyJoinVolume,\n    setDailySwapVolume,\n    createPool: state.createPool,\n    createHodlPool: state.createHodlPool,\n    createBalancerPool: state.createBalancerPool,\n    toggleIndexPool,\n    toggleBalancerPool,\n    toggleHodlPool,\n    setStartingValue,\n    startingValue: state.startingValue,\n    setMinimumTraderProfit,\n    minimumTraderProfit: state.minimumTraderProfit\n  };\n}","import { useReducer } from \"react\";\nimport { getWeightTargets, getPrices } from \"../api\";\n\nconst initialState = { selectedTokens: [] };\n\nconst TokenActionTypes = {\n  remove: 'REMOVE_TOKEN',\n  select: 'SELECT_TOKEN',\n  set: 'SET_SELECTED'\n}\n\nfunction tokensReducer(state = initialState, action) {\n  switch (action.type) {\n    case TokenActionTypes.select: return { selectedTokens: [ ...state.selectedTokens, action.token ] };\n    case TokenActionTypes.remove: return { selectedTokens: state.selectedTokens.filter(t => t != action.token) };\n    case TokenActionTypes.set: return { selectedTokens: action.selectedTokens };\n  }\n}\n\nexport async function handleToggle({ formDispatch, tokensDispatch, selectedTokens, token }) {\n  formDispatch({ type: 'START_LOADING' });\n  const selected = selectedTokens.includes(token);\n  let newTokens = [ ...selectedTokens ];\n  if (!selected) {\n    newTokens.push(token);\n  } else {\n    newTokens = newTokens.filter(t => t != token);\n  }\n  tokensDispatch({ type: 'SET_SELECTED', selectedTokens: newTokens });\n  if (newTokens.length == 0) return;\n  const {/* marketcapDatasets, */ priceDatasets, labels} = await getPrices(newTokens);\n  formDispatch({\n    type: 'SET_DATA', labels, /* selected: selectedTokens, marketcapDatasets, */ priceDatasets\n  });\n}\n\nexport function useTokens() {\n  const [state, dispatch] = useReducer(tokensReducer, initialState);\n  const selectedTokens = state.selectedTokens;\n  // const selectToken = (token) => dispatch({ type: TokenActionTypes.select, token });\n  // const unselectToken = (token) => dispatch({ type: TokenActionTypes.remove, token });\n\n  return {\n    tokensDispatch: dispatch,\n    selectedTokens,\n    // selectToken,\n    // unselectToken\n  };\n}","import React, { createContext, useContext } from 'react';\nimport { backtest, getVolatility, getWeightTargets } from '../api';\nimport { useAlerts } from './alert-reducer';\nimport { useForm } from './form-reducer';\nimport { handleToggle, useTokens } from './tokens-reducer';\n\nconst StateContext = createContext(null);\n\nexport const StateProvider = ({ children }) => {\n  const alertHooks = useAlerts();\n  const formHooks = useForm();\n  const tokenHooks = useTokens();\n  const stateHooks = { ...alertHooks, ...formHooks, ...tokenHooks };\n  const { formDispatch, selectedTokens, tokensDispatch, indexSize } = stateHooks;\n\n  function toggleToken(token) {\n    formDispatch({ type: 'START_LOADING' });\n    handleToggle({ formDispatch, selectedTokens, tokensDispatch, token });\n    const newsize = selectedTokens.includes(token) ? selectedTokens.length - 1 : selectedTokens.length + 1;\n    stateHooks.setIndexSize(newsize)\n  }\n\n  async function updateWeights() {\n    formDispatch({ type: 'START_LOADING' });\n    const { labels, datasets } = await getWeightTargets(selectedTokens, indexSize);\n    formDispatch({ type: 'SET_WEIGHTS', datasets, labels });\n  }\n\n  async function backtestPools() {\n    formDispatch({ type: 'START_LOADING' });\n    const {\n      startingValue, dailyJoinVolume, dailySwapVolume, swapFee,\n      createHodlPool, createBalancerPool, createPool, minimumTraderProfit\n    } = stateHooks;\n    const options = {\n      tokens: selectedTokens,\n      dailyJoinVolume,\n      dailySwapVolume,\n      swapFee,\n      size: +(indexSize),\n      initialValue: startingValue,\n      hodl: createHodlPool,\n      index: createPool,\n      balancer: createBalancerPool,\n      minimumTraderProfit\n    };\n    const { labels, datasets } = await backtest(options);\n    formDispatch({ type: 'SET_POOL_DATA', datasets, labels });\n  }\n\n  async function getTokenVolatility() {\n    formDispatch({ type: 'START_LOADING' });\n    const { labels, datasets } = await getVolatility(selectedTokens);\n    formDispatch({ type: 'SET_VOLATILITY', datasets, labels });\n  }\n\n  stateHooks.toggleToken = toggleToken;\n  stateHooks.updateWeights = updateWeights;\n  stateHooks.backtestPools = backtestPools;\n  stateHooks.getTokenVolatility = getTokenVolatility;\n\n  return <StateContext.Provider value={stateHooks}>\n    {children}\n  </StateContext.Provider>\n};\n\nexport const useGlobalState = () => useContext(StateContext);","import React from 'react';\nimport { Grid, GridSpacing } from '@material-ui/core';\n\ntype RowProps = {\n  children?: any;\n  colSpacing?: GridSpacing;\n  rowSpacing?: GridSpacing;\n  colSize?: GridSpacing;\n}\n\nexport default function Row({ children, colSpacing, colSize, rowSpacing }: RowProps) {\n  const childArr = Array.isArray(children) ? children : [children];\n  return <Grid item>\n    <Grid container justify='center' spacing={rowSpacing || 2} direction='row' wrap='wrap'>\n      {\n        childArr.map((child, i) => <Grid item /* spacing={colSpacing} */ { ...(colSize ? { md: colSize } : {}) } key={i}>\n          {child}\n        </Grid>)\n      }\n    </Grid>\n  </Grid>\n}","import React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Tooltip from '@material-ui/core/Tooltip';\n\ntype SmallSwitchProps = {\n  checked?: boolean;\n  onClick: (...x: any) => void;\n  disabled?: boolean;\n  label?: string;\n  tooltip?: string;\n}\n\nexport default function SmallSwitch({ checked, onClick, disabled, label, tooltip }: SmallSwitchProps) {\n  const comp = (<FormControlLabel\n    control={\n      <Switch\n        color='secondary'\n        checked={checked}\n        size='small'\n        onClick={onClick}\n        disabled={disabled}\n      />\n    }\n    label={label}\n  />);\n  if (tooltip) {\n    return <Tooltip title={tooltip}>{comp}</Tooltip>\n  }\n  return comp;\n}","import React, { useEffect, useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport { useGlobalState } from \"../state/reducers\";\nimport Row from './Row';\nimport { Chip, Grid } from '@material-ui/core';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst tokenList = require('../lib/token-list.json');\nconst defaultOptions = tokenList.map((t, i) => ({ ...t, selected: false, index: i }));\nconst symbolToIndex = defaultOptions.reduce((obj, opt, i) => ({ ...obj, [opt.symbol]: i }), {});\n\nexport default function TokenSelect() {\n  const [options, setOptions] = useState(defaultOptions);\n  const { selectedTokens, toggleToken, formLoading } = useGlobalState();\n\n  const handleToggle = (symbol) => {\n    const newOptions = [...options];\n    const i = symbolToIndex[symbol];\n    newOptions[i].selected = !newOptions[i].selected;\n    setOptions(newOptions);\n    toggleToken(symbol);\n  }\n\n  return <Grid container justify='center' direction='column' spacing={2}>\n    <Grid item justify='center'>\n      <Row colSize={6} colSpacing={3}>\n        <Autocomplete\n          multiple\n          disabled={formLoading}\n          id=\"token-search\"\n          options={options}\n          disableCloseOnSelect\n          disable\n          renderTags={() => <></>}\n          size='small'\n          getOptionLabel={(option) => `${option.name} (${option.symbol})`}\n          onChange={(event, values, reason, details) => {\n            handleToggle(details.option.symbol)\n          }}\n          renderOption={(option/* , { selected } */) => <React.Fragment>\n            <Checkbox\n              icon={icon}\n              name={option.symbol}\n              checkedIcon={checkedIcon}\n              style={{ marginRight: 8 }}\n              checked={option.selected}\n            />\n            {option.name} ({option.symbol})\n          </React.Fragment>}\n          renderInput={(params) => (\n            <TextField {...params} variant=\"outlined\" label=\"Tokens\" placeholder=\"Tokens\" />\n          )}\n        />\n      </Row>\n    </Grid>\n    <Grid item>\n      {\n        selectedTokens.map((symbol) => <Chip\n          disabled={formLoading}\n          onDelete={() => {\n            handleToggle(symbol)\n          }}\n          label={symbol}\n          color='primary'\n          variant='outlined'\n        />)\n      }\n    </Grid>\n  </Grid>\n}","import React from 'react';\nimport { Button, Grid, Paper, TextField, Tooltip } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useGlobalState } from '../state/reducers';\nimport Row from './Row';\nimport SmallSwitch from './SmallSwitch';\nimport TokenSelect from './TokenSelect';\n\nfunction SmallButton({ variant, onClick, disabled, text }) {\n  return <Button size='small' variant={variant} color='secondary' onClick={onClick} disabled={disabled}>\n    {text}\n  </Button>\n}\n\nexport function DataSetForm({ rootProps }) {\n  const {\n    formLoading: loading,\n    swapFee, setFee,\n    dailyJoinVolume, setDailyJoinVolume,\n    dailySwapVolume, setDailySwapVolume,\n    createPool, createHodlPool, createBalancerPool,\n    toggleIndexPool, toggleBalancerPool, toggleHodlPool,\n    startingValue, setStartingValue,\n    backtestPools, updateWeights,\n    indexSize, setIndexSize,\n    getTokenVolatility,\n    selectedTokens,\n    minimumTraderProfit, setMinimumTraderProfit\n  } = useGlobalState();\n\n  const renderInput = (value, setValue, name, label, endAdornment = null, startAdornment = null, tooltip = null) => {\n    const inputProps = { endAdornment, startAdornment };\n    const comp = (<TextField\n      size='small'\n      label={label}\n      variant='outlined'\n      value={value}\n      name={name}\n      disabled={loading}\n      onChange={({ target: { value: newValue } }) => setValue(newValue)}\n      {...{ InputProps: inputProps }}\n    />);\n    if (tooltip) {\n      return <Tooltip title={tooltip}>{comp}</Tooltip>\n    }\n    return comp;\n  }\n\n  const disableButtons = selectedTokens.length == 0 || loading;\n\n  return <Paper style={{ width: '700px', height: '400px' }} {...rootProps}>\n    <Grid\n      container\n      direction='column'\n      style={{ width: '100%', height: '100%', paddingTop: 20 }}\n      spacing={2}\n    >\n      <TokenSelect />\n      <Row rowSpacing={1} colSize={3}>\n        {renderInput(indexSize, setIndexSize, 'index-size', 'Index Size', null, null, 'Target number of underlying tokens.')}\n        {renderInput(swapFee, setFee, 'swap-fee', 'Swap Fee', '%', null)}\n        {renderInput(minimumTraderProfit, setMinimumTraderProfit, 'minimum-profit', 'Minimum Profit', null, '$', 'Minimum profit for an arbitrageur to execute a trade.')}\n      </Row>\n      <Row rowSpacing={1} colSize={3}>\n        {renderInput(startingValue, setStartingValue, 'initial-value', 'Starting Value', null, '$')}\n        {renderInput(dailyJoinVolume, setDailyJoinVolume, 'daily-join-volume', 'Daily Join Volume', '%', null, `Percent of the pool's market cap that will be added daily through pool joins.`)}\n        {renderInput(dailySwapVolume, setDailySwapVolume, 'daily-swap-volume', 'Daily Swap Volume', '%', null, `Percent of the pool's market cap that will be swapped daily.`)}\n      </Row>\n      <Row rowSpacing={1} colSize={3}>\n        <SmallSwitch\n          checked={createBalancerPool}\n          onClick={toggleBalancerPool}\n          disabled={loading}\n          label='Balancer'\n          tooltip='Standard Balancer pool which uses the original weights and tokens that would be used by the index pool, with no weight or token changes afterwards.'\n        />\n        <SmallSwitch\n          checked={createPool}\n          onClick={toggleIndexPool}\n          disabled={loading}\n          label='Index'\n          tooltip='Balancer pool modified to allow gradual reweighing of the underlying assets and changes to the underlying tokens.'\n        />\n        <SmallSwitch\n          checked={createHodlPool}\n          onClick={toggleHodlPool}\n          disabled={loading}\n          label='Simple Rebalancer'\n          tooltip='Portfolio that rebalances every day to the same weights as the index pool with no loss to slippage or fees.'\n        />\n      </Row>\n      <Row rowSpacing={2} colSpacing={3}>\n        <SmallButton variant='outlined' onClick={getTokenVolatility} disabled={disableButtons} text={'GET VOLATILITY'} />\n        <SmallButton variant='outlined' onClick={updateWeights} disabled={disableButtons} text={'GET WEIGHTS'} />\n        <SmallButton variant='outlined' onClick={backtestPools} disabled={disableButtons} text={'BACKTEST'} />\n      </Row>\n      <Row> {loading && <CircularProgress />} </Row>\n    </Grid>\n  </Paper>\n}","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { Alerts } from './Alerts';\nimport './App.css';\nimport { DataSetForm } from './components/DataSetForm';\nimport { useGlobalState } from './state/reducers';\n\nfunction App() {\n  const { renderTokenPrices, renderTokenMarketcaps, renderPoolData, renderWeights, renderVolatility } = useGlobalState();\n  return (\n    <div className=\"App\">\n      <DataSetForm className='input-paper' />\n      <div style={{ width: '100vw', paddingLeft: '5%', paddingRight: '5%' }}>\n        <Grid container direction='row' justify='center' spacing={2}>\n          <Grid item md={3}>\n            {renderTokenPrices()}\n          </Grid>\n          {/* <Grid item md={3}>\n            {renderTokenMarketcaps()}\n          </Grid> */}\n        </Grid>\n      </div>\n      <div style={{ width: '100vw', paddingLeft: '5%', paddingRight: '5%', marginTop: '2%' }}>\n        <Grid container direction='row' justify='center' spacing={2}>\n          <Grid item md={3}>\n            {renderPoolData()}\n          </Grid>\n          <Grid item md={3}>\n            {renderWeights()}\n          </Grid>\n        </Grid>\n      </div>\n      <div style={{ width: '100vw', paddingLeft: '5%', paddingRight: '5%', marginTop: '2%' }}>\n        <Grid container direction='row' justify='center' spacing={2}>\n          <Grid item md={3}>\n            {renderVolatility()}\n          </Grid>\n        </Grid>\n      </div>\n      {/* <Alerts /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StateProvider } from './state/reducers/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}